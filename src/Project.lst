Microsoft (R) Macro Assembler Version 14.25.28612.0	    06/14/20 00:24:41
AddSub2.asm						     Page 1 - 1






				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE macros.inc
			      C .NOLIST
			      C .LIST
			      C 
 = 000003E8			MAP_SIZE = 1000

 00000000			.data
 00000000 6D 61 70 2E 74	filename BYTE "map.txt", 0
	   78 74 00
 00000008 6D 61 70 32 2E	filename2 BYTE "map2.txt", 0
	   74 78 74 00
 00000011 6D 61 70 33 2E	filename3 BYTE "map3.txt", 0
	   74 78 74 00
 0000001A  000003E8 [		map BYTE MAP_SIZE DUP(?)
	    00
	   ]
 00000402 00000000		fileHandle HANDLE ?
 00000406 53 65 6C 65 63	prompt BYTE "Select one: ", 0
	   74 20 6F 6E 65
	   3A 20 00
 00000413 00000000		mapLength DWORD ? 
 00000417 00000000		numOfCol DWORD ?
 0000041B 00000000		numOfRow DWORD ?
 0000041F 00000000		pacmanCurrent DWORD ?
 00000423 00000000		numOfGhost DWORD ?
 00000427 00000000		pacmanPrev DWORD 0h



 00000000			.code
 00000000			main PROC
 00000000  B9 0000000A			mov ecx,10
 00000005  BA 00000000 R		mov edx,OFFSET filename
 0000000A  E8 0000001D			call OpenFile
 0000000F			L1:
 0000000F  E8 000000FE			call PrintMenu
 00000014  E8 000001CC			call GetInput
 00000019  E8 000000A8			call PrintMap
 0000001E  E8 000000AE			call FindVariables
					

 00000023  E2 EA			loop L1

					exit
 00000025  6A 00	   *	    push   +000000000h
 00000027  E8 00000000 E   *	    call   ExitProcess
 0000002C			main ENDP
				; takes edx as filename to enable choosing what file to open
 0000002C			OpenFile PROC

 0000002C  E8 00000000 E		call OpenInputFile
 00000031  A3 00000402 R		mov fileHandle,eax
					;check for error opening file
 00000036  83 F8 FF			cmp eax,INVALID_HANDLE_VALUE	
 00000039  75 05			jne file_ok
 0000003B  E8 00000000 E		call WriteWindowsMsg


 00000040			file_ok:
					; Read the file into a buffer.
 00000040  BA 0000001A R		mov edx,OFFSET map
 00000045  B9 000003E8			mov ecx,MAP_SIZE
 0000004A  E8 00000000 E		call ReadFromFile

 0000004F  A3 00000413 R		mov mapLength,eax

				;	call WriteWindowsMsg

 00000054  E8 00000021			call numOfRowCol
 00000059  E8 00000073			call FindVariables


					;print the map
 0000005E  BA 0000001A R		mov edx,OFFSET map
 00000063  E8 00000000 E		call WriteString
 00000068  E8 00000000 E		call Crlf



 0000006D  EB 00			jmp close_file



 0000006F			close_file:
 0000006F  A1 00000402 R		mov eax,fileHandle
 00000074  E8 00000000 E		call CloseFile

 00000079  C3				ret

 0000007A			OpenFile ENDP
 0000007A			numOfRowCol PROC
 0000007A  BE 0000001A R		mov esi, OFFSET map
					;temp
 0000007F  8B 0D 00000413 R		mov ecx, mapLength
 00000085  BB 00000000			mov ebx, 0			;counter of row
 0000008A  B8 00000000			mov eax, 0			;counter of col

 0000008F			gettingColNum:
					
 0000008F  80 3E 0A			cmp BYTE PTR [esi],0ah	;looking for a last char in a line
 00000092  75 16			jne Col
 00000094  43				inc ebx					;last count +1
 00000095  89 1D 00000417 R		mov numOfCol, ebx
 0000009B  BE 0000001A R		mov esi, OFFSET map		;reinit
 000000A0  8B 0D 00000413 R		mov ecx, mapLength
 000000A6  EB 08			jmp gettingRowNum		;if succesfully obtained number of row
 000000A8  E2 E5			loop gettingColNum

 000000AA				Col:
 000000AA  43					inc ebx
 000000AB  83 C6 01				add esi,TYPE map
 000000AE  E2 DF				loop gettingColNum

 000000B0			gettingRowNum:
					
 000000B0  80 3E 0A			cmp BYTE PTR [esi],0ah	;looking for a last char in a line
 000000B3  74 05			je Row
 000000B5  83 C6 01			add esi,TYPE map
 000000B8  E2 F6			loop gettingRowNum

 000000BA				Row:
 000000BA  40					inc eax
 000000BB  83 C6 01				add esi,TYPE map
 000000BE  E2 F0				loop gettingRowNum

 000000C0  A3 0000041B R		mov numOfRow, eax

 000000C5  C3				ret
 000000C6			numOfRowCol ENDP
 000000C6			PrintMap PROC
 000000C6  BA 0000001A R		mov edx, OFFSET map
 000000CB  E8 00000000 E		call WriteString
 000000D0  C3				ret
 000000D1			PrintMap ENDP
 000000D1			FindVariables PROC
 000000D1  BE 0000001A R		mov esi, OFFSET map
					;temp
 000000D6  8B 0D 00000413 R		mov ecx, mapLength
 000000DC  B8 00000000			mov eax,0			; counter for ghost
					
 000000E1			L1:

 000000E1  80 3E 2A			cmp BYTE PTR [esi],2ah
 000000E4  74 15			je Wall
 000000E6  80 3E 24			cmp BYTE PTR [esi],24h
 000000E9  74 15			je Ghost
 000000EB  80 3E 40			cmp BYTE PTR [esi],40h
 000000EE  74 16			je Pacman
 000000F0  83 C6 01			add esi,TYPE map
 000000F3  E2 EC			loop L1
 000000F5  A3 00000423 R		mov numOfGhost,eax
 000000FA  C3				ret

 000000FB				Wall:
 000000FB  83 C6 01				add esi,TYPE map
 000000FE  E2 E1				loop L1

 00000100				Ghost:
 00000100  40					inc eax
 00000101  83 C6 01				add esi,TYPE map
 00000104  E2 DB				loop L1

 00000106				Pacman: 
 00000106  89 35 0000041F R			mov pacmanCurrent,esi		;store address
 0000010C  83 C6 01				add esi,TYPE map
 0000010F  E2 D0				loop L1

						

					
 00000111  C3				ret
 00000112			FindVariables ENDP
 00000112			PrintMenu PROC



					.IF numOfGhost == 0
 00000112  83 3D 00000423 R
	   00		   *	    cmp    numOfGhost, 000h
 00000119  75 07	   *	    jne    @C0001
 0000011B  E9 00000086				jmp PrintPSE
					.ELSEIF 
 00000120  EB 02	   *	    jmp    @C0003
 00000122		   *@C0001:
 00000122  EB 00				jmp PrintAll
					.ENDIF
 00000124		   *@C0003:
 00000124				PrintAll:
 00000124  E8 00000000 E			call Crlf
						mWriteln "Start new games(N)"
 0000042B		     2		.data		
 0000042B 53 74 61 72 74     2		??0000 BYTE "Start new games(N)",0	
	   20 6E 65 77 20
	   67 61 6D 65 73
	   28 4E 29 00
 00000129		     2		.code
 00000129  52		     2		push	edx
 0000012A  BA 0000042B R     2		mov	edx,OFFSET ??0000
 0000012F  E8 00000000 E     2		call	WriteString
 00000134  5A		     2		pop	edx
 00000135  E8 00000000 E     1		call	Crlf
						mWriteln "Print Map(P)"
 0000043E		     2		.data		
 0000043E 50 72 69 6E 74     2		??0001 BYTE "Print Map(P)",0	
	   20 4D 61 70 28
	   50 29 00
 0000013A		     2		.code
 0000013A  52		     2		push	edx
 0000013B  BA 0000043E R     2		mov	edx,OFFSET ??0001
 00000140  E8 00000000 E     2		call	WriteString
 00000145  5A		     2		pop	edx
 00000146  E8 00000000 E     1		call	Crlf
						mWriteln "Move Up(U or W)"
 0000044B		     2		.data		
 0000044B 4D 6F 76 65 20     2		??0002 BYTE "Move Up(U or W)",0	
	   55 70 28 55 20
	   6F 72 20 57 29
	   00
 0000014B		     2		.code
 0000014B  52		     2		push	edx
 0000014C  BA 0000044B R     2		mov	edx,OFFSET ??0002
 00000151  E8 00000000 E     2		call	WriteString
 00000156  5A		     2		pop	edx
 00000157  E8 00000000 E     1		call	Crlf
						mWriteln "Move Down(S)"
 0000045B		     2		.data		
 0000045B 4D 6F 76 65 20     2		??0003 BYTE "Move Down(S)",0	
	   44 6F 77 6E 28
	   53 29 00
 0000015C		     2		.code
 0000015C  52		     2		push	edx
 0000015D  BA 0000045B R     2		mov	edx,OFFSET ??0003
 00000162  E8 00000000 E     2		call	WriteString
 00000167  5A		     2		pop	edx
 00000168  E8 00000000 E     1		call	Crlf
						mWriteln "Move Left(L or A)"
 00000468		     2		.data		
 00000468 4D 6F 76 65 20     2		??0004 BYTE "Move Left(L or A)",0	
	   4C 65 66 74 28
	   4C 20 6F 72 20
	   41 29 00
 0000016D		     2		.code
 0000016D  52		     2		push	edx
 0000016E  BA 00000468 R     2		mov	edx,OFFSET ??0004
 00000173  E8 00000000 E     2		call	WriteString
 00000178  5A		     2		pop	edx
 00000179  E8 00000000 E     1		call	Crlf
						mWriteln "Move Right(R or D)"
 0000047A		     2		.data		
 0000047A 4D 6F 76 65 20     2		??0005 BYTE "Move Right(R or D)",0	
	   52 69 67 68 74
	   28 52 20 6F 72
	   20 44 29 00
 0000017E		     2		.code
 0000017E  52		     2		push	edx
 0000017F  BA 0000047A R     2		mov	edx,OFFSET ??0005
 00000184  E8 00000000 E     2		call	WriteString
 00000189  5A		     2		pop	edx
 0000018A  E8 00000000 E     1		call	Crlf
						mWriteln "End game(E)"
 0000048D		     2		.data		
 0000048D 45 6E 64 20 67     2		??0006 BYTE "End game(E)",0	
	   61 6D 65 28 45
	   29 00
 0000018F		     2		.code
 0000018F  52		     2		push	edx
 00000190  BA 0000048D R     2		mov	edx,OFFSET ??0006
 00000195  E8 00000000 E     2		call	WriteString
 0000019A  5A		     2		pop	edx
 0000019B  E8 00000000 E     1		call	Crlf
 000001A0  E8 00000000 E			call Crlf

 000001A5  C3					ret

 000001A6				PrintPSE:
 000001A6  E8 00000000 E			call Crlf
						mWriteln "Start new games(N)"
 00000499		     2		.data		
 00000499 53 74 61 72 74     2		??0007 BYTE "Start new games(N)",0	
	   20 6E 65 77 20
	   67 61 6D 65 73
	   28 4E 29 00
 000001AB		     2		.code
 000001AB  52		     2		push	edx
 000001AC  BA 00000499 R     2		mov	edx,OFFSET ??0007
 000001B1  E8 00000000 E     2		call	WriteString
 000001B6  5A		     2		pop	edx
 000001B7  E8 00000000 E     1		call	Crlf
						mWriteln "Print Map(P)"
 000004AC		     2		.data		
 000004AC 50 72 69 6E 74     2		??0008 BYTE "Print Map(P)",0	
	   20 4D 61 70 28
	   50 29 00
 000001BC		     2		.code
 000001BC  52		     2		push	edx
 000001BD  BA 000004AC R     2		mov	edx,OFFSET ??0008
 000001C2  E8 00000000 E     2		call	WriteString
 000001C7  5A		     2		pop	edx
 000001C8  E8 00000000 E     1		call	Crlf
						mWriteln "End game(E)"
 000004B9		     2		.data		
 000004B9 45 6E 64 20 67     2		??0009 BYTE "End game(E)",0	
	   61 6D 65 28 45
	   29 00
 000001CD		     2		.code
 000001CD  52		     2		push	edx
 000001CE  BA 000004B9 R     2		mov	edx,OFFSET ??0009
 000001D3  E8 00000000 E     2		call	WriteString
 000001D8  5A		     2		pop	edx
 000001D9  E8 00000000 E     1		call	Crlf
 000001DE  E8 00000000 E			call Crlf

 000001E3  C3					ret


 000001E4  C3				ret

 000001E5			PrintMenu ENDP
 000001E5			GetInput PROC

 000001E5			asking:

 000001E5  BA 00000406 R		mov edx, OFFSET prompt
 000001EA  E8 00000000 E		call writeString		;display message
 000001EF  E8 00000000 E		call ReadChar			;input from keyboard
 000001F4  E8 00000000 E		call WriteChar			;echo on screen
 000001F9  E8 00000000 E		call crlf
					
					.IF numOfGhost == 0
 000001FE  83 3D 00000423 R
	   00		   *	    cmp    numOfGhost, 000h
 00000205  75 04	   *	    jne    @C0006
 00000207  EB 07				jmp GettingPSEInput
					.ELSE
 00000209  EB 05	   *	    jmp    @C0008
 0000020B		   *@C0006:
 0000020B  E9 000000A2				jmp GettingAllInput
					.ENDIF
 00000210		   *@C0008:

 00000210				GettingPSEInput:
						.IF al == "N" || al == "n"
 00000210  3C 4E	   *	    cmp    al, 'N'
 00000212  74 04	   *	    je	@C000A
 00000214  3C 6E	   *	    cmp    al, 'n'
 00000216  75 68	   *	    jne    @C0009
 00000218		   *@C000A:
							; inside if statement is checking what number the user entered: 1,2,3.
							;_1 and _2 are for avoiding label conflicts with GettingAllInput label
							; this section is similar to the GettingAllInput
							; also reset some variables
 00000218  C7 05 00000427 R				mov PacmanPrev, 0h
	   00000000
 00000222					FILECHOICE_1:
							mWriteln "Choose a file: (1): ""map.txt"" (2): ""map2.txt"" (3): ""map3.txt"""
 000004C5		     2		.data		
 000004C5 43 68 6F 6F 73     2		??000A BYTE "Choose a file: (1): ""map.txt"" (2): ""map2.txt"" (3): ""map3.txt""",0	
	   65 20 61 20 66
	   69 6C 65 3A 20
	   28 31 29 3A 20
	   22 6D 61 70 2E
	   74 78 74 22 20
	   28 32 29 3A 20
	   22 6D 61 70 32
	   2E 74 78 74 22
	   20 28 33 29 3A
	   20 22 6D 61 70
	   33 2E 74 78 74
	   22 00
 00000222		     2		.code
 00000222  52		     2		push	edx
 00000223  BA 000004C5 R     2		mov	edx,OFFSET ??000A
 00000228  E8 00000000 E     2		call	WriteString
 0000022D  5A		     2		pop	edx
 0000022E  E8 00000000 E     1		call	Crlf
 00000233  E8 00000000 E				CALL ReadChar
 00000238  3C 31					cmp al, "1"
 0000023A  75 0C					jne MAP2_1
 0000023C  BA 00000000 R				mov edx, OFFSET filename
 00000241  E8 FFFFFDE6					call OpenFile
 00000246  EB 36					jmp AFTERMAP_1
 00000248					MAP2_1:
 00000248  3C 32					cmp al, "2"
 0000024A  75 0C					jne MAP3_1
 0000024C  BA 00000008 R				mov edx, OFFSET filename2
 00000251  E8 FFFFFDD6					call OpenFile
 00000256  EB 26					jmp AFTERMAP_1
 00000258					MAP3_1:
 00000258  3C 33					cmp al, "3"
 0000025A  75 0F					jne INVALIDPSE
 0000025C  BA 00000011 R				mov edx, OFFSET filename3
 00000261  E8 FFFFFDC6					call OpenFile
 00000266  E9 000000B6					jmp AFTERMAP_2
 0000026B					INVALIDPSE:
							mWriteln "INVALID"
 00000503		     2		.data		
 00000503 49 4E 56 41 4C     2		??000B BYTE "INVALID",0	
	   49 44 00
 0000026B		     2		.code
 0000026B  52		     2		push	edx
 0000026C  BA 00000503 R     2		mov	edx,OFFSET ??000B
 00000271  E8 00000000 E     2		call	WriteString
 00000276  5A		     2		pop	edx
 00000277  E8 00000000 E     1		call	Crlf
 0000027C  EB A4					jmp FILECHOICE_1
 0000027E					AFTERMAP_1:
						.ELSEIF al == "P" || al == "p"
 0000027E  EB 31	   *	    jmp    @C000C
 00000280		   *@C0009:
 00000280  3C 50	   *	    cmp    al, 'P'
 00000282  74 04	   *	    je	@C000E
 00000284  3C 70	   *	    cmp    al, 'p'
 00000286  75 02	   *	    jne    @C000D
 00000288		   *@C000E:

						.ELSEIF al == "E" || al == "e"
 00000288  EB 27	   *	    jmp    @C0010
 0000028A		   *@C000D:
 0000028A  3C 45	   *	    cmp    al, 'E'
 0000028C  74 04	   *	    je	@C0012
 0000028E  3C 65	   *	    cmp    al, 'e'
 00000290  75 09	   *	    jne    @C0011
 00000292		   *@C0012:
							exit
 00000292  6A 00	   *	    push   +000000000h
 00000294  E8 00000000 E   *	    call   ExitProcess

						.ELSE
 00000299  EB 16	   *	    jmp    @C0014
 0000029B		   *@C0011:
							mWriteln "INVALID"
 0000050B		     2		.data		
 0000050B 49 4E 56 41 4C     2		??000C BYTE "INVALID",0	
	   49 44 00
 0000029B		     2		.code
 0000029B  52		     2		push	edx
 0000029C  BA 0000050B R     2		mov	edx,OFFSET ??000C
 000002A1  E8 00000000 E     2		call	WriteString
 000002A6  5A		     2		pop	edx
 000002A7  E8 00000000 E     1		call	Crlf
 000002AC  E9 FFFFFF34					jmp asking
						.ENDIF
 000002B1		   *@C0014:
 000002B1		   *@C0010:
 000002B1		   *@C000C:
 000002B1  C3					ret
					
 000002B2				GettingAllInput:
						.IF al == "N" || al == "n"
 000002B2  3C 4E	   *	    cmp    al, 'N'
 000002B4  74 04	   *	    je	@C0016
 000002B6  3C 6E	   *	    cmp    al, 'n'
 000002B8  75 6C	   *	    jne    @C0015
 000002BA		   *@C0016:
 000002BA  C7 05 00000427 R			mov PacmanPrev, 0h
	   00000000
 000002C4					FILECHOICE_2:
							mWriteln "Choose a file: (1): ""map.txt"" (2): ""map2.txt"" (3): ""map3.txt"""
 00000513		     2		.data		
 00000513 43 68 6F 6F 73     2		??000D BYTE "Choose a file: (1): ""map.txt"" (2): ""map2.txt"" (3): ""map3.txt""",0	
	   65 20 61 20 66
	   69 6C 65 3A 20
	   28 31 29 3A 20
	   22 6D 61 70 2E
	   74 78 74 22 20
	   28 32 29 3A 20
	   22 6D 61 70 32
	   2E 74 78 74 22
	   20 28 33 29 3A
	   20 22 6D 61 70
	   33 2E 74 78 74
	   22 00
 000002C4		     2		.code
 000002C4  52		     2		push	edx
 000002C5  BA 00000513 R     2		mov	edx,OFFSET ??000D
 000002CA  E8 00000000 E     2		call	WriteString
 000002CF  5A		     2		pop	edx
 000002D0  E8 00000000 E     1		call	Crlf
 000002D5  E8 00000000 E				CALL ReadChar
 000002DA  3C 31					cmp al, "1"
 000002DC  75 0C					jne MAP2_2
 000002DE  BA 00000000 R				mov edx, OFFSET filename
 000002E3  E8 FFFFFD44					call OpenFile
 000002E8  EB 37					jmp AFTERMAP_2
 000002EA					MAP2_2:
 000002EA  3C 32					cmp al, "2"
 000002EC  0F 85 FFFFFF66				jne MAP3_1
 000002F2  BA 00000008 R				mov edx, OFFSET filename2
 000002F7  E8 FFFFFD30					call OpenFile
 000002FC  EB 23					jmp AFTERMAP_2
 000002FE					MAP3_2:
 000002FE  3C 33					cmp al, "3"
 00000300  75 0C					jne INVALIDALL
 00000302  BA 00000011 R				mov edx, OFFSET filename3
 00000307  E8 FFFFFD20					call OpenFile
 0000030C  EB 13					jmp AFTERMAP_2
 0000030E					INVALIDALL:
							mWriteln "INVALID"
 00000551		     2		.data		
 00000551 49 4E 56 41 4C     2		??000E BYTE "INVALID",0	
	   49 44 00
 0000030E		     2		.code
 0000030E  52		     2		push	edx
 0000030F  BA 00000551 R     2		mov	edx,OFFSET ??000E
 00000314  E8 00000000 E     2		call	WriteString
 00000319  5A		     2		pop	edx
 0000031A  E8 00000000 E     1		call	Crlf
 0000031F  EB A3					jmp FILECHOICE_2
 00000321					AFTERMAP_2:
						.ELSEIF al == "P" || al == "p"
 00000321  E9 000000AA	   *	    jmp    @C0018
 00000326		   *@C0015:
 00000326  3C 50	   *	    cmp    al, 'P'
 00000328  74 04	   *	    je	@C001A
 0000032A  3C 70	   *	    cmp    al, 'p'
 0000032C  75 05	   *	    jne    @C0019
 0000032E		   *@C001A:
							

						.ELSEIF al == "U" || al == "u" || al == "W" || al == "w"
 0000032E  E9 0000009D	   *	    jmp    @C001C
 00000333		   *@C0019:
 00000333  3C 55	   *	    cmp    al, 'U'
 00000335  74 0C	   *	    je	@C001E
 00000337  3C 75	   *	    cmp    al, 'u'
 00000339  74 08	   *	    je	@C001E
 0000033B  3C 57	   *	    cmp    al, 'W'
 0000033D  74 04	   *	    je	@C001E
 0000033F  3C 77	   *	    cmp    al, 'w'
 00000341  75 12	   *	    jne    @C001D
 00000343		   *@C001E:
 00000343  A1 0000041F R				mov eax, pacmanCurrent	
 00000348  2B 05 00000417 R				sub eax, numOfCol		;subtract one line
 0000034E  E8 0000007F					call CheckAvailibity

						.ELSEIF al == "L" || al == "l" || al == "A" || al == "a"
 00000353  EB 7B	   *	    jmp    @C0022
 00000355		   *@C001D:
 00000355  3C 4C	   *	    cmp    al, 'L'
 00000357  74 0C	   *	    je	@C0024
 00000359  3C 6C	   *	    cmp    al, 'l'
 0000035B  74 08	   *	    je	@C0024
 0000035D  3C 41	   *	    cmp    al, 'A'
 0000035F  74 04	   *	    je	@C0024
 00000361  3C 61	   *	    cmp    al, 'a'
 00000363  75 0D	   *	    jne    @C0023
 00000365		   *@C0024:
 00000365  A1 0000041F R				mov eax, pacmanCurrent	
 0000036A  48						dec eax
 0000036B  E8 00000062					call CheckAvailibity
						
						.ELSEIF al == "S" || al == "s"
 00000370  EB 5E	   *	    jmp    @C0028
 00000372		   *@C0023:
 00000372  3C 53	   *	    cmp    al, 'S'
 00000374  74 04	   *	    je	@C002A
 00000376  3C 73	   *	    cmp    al, 's'
 00000378  75 12	   *	    jne    @C0029
 0000037A		   *@C002A:
 0000037A  A1 0000041F R				mov eax, pacmanCurrent	
 0000037F  03 05 00000417 R				add eax, numOfCol		;subtract one line
 00000385  E8 00000048					call CheckAvailibity


						.ELSEIF al == "R" || al == "r" || al == "D" || al == "d"
 0000038A  EB 44	   *	    jmp    @C002C
 0000038C		   *@C0029:
 0000038C  3C 52	   *	    cmp    al, 'R'
 0000038E  74 0C	   *	    je	@C002E
 00000390  3C 72	   *	    cmp    al, 'r'
 00000392  74 08	   *	    je	@C002E
 00000394  3C 44	   *	    cmp    al, 'D'
 00000396  74 04	   *	    je	@C002E
 00000398  3C 64	   *	    cmp    al, 'd'
 0000039A  75 0D	   *	    jne    @C002D
 0000039C		   *@C002E:
 0000039C  A1 0000041F R				mov eax, pacmanCurrent	
 000003A1  40						inc eax
 000003A2  E8 0000002B					call CheckAvailibity

						.ELSEIF al == "E" || al == "e"
 000003A7  EB 27	   *	    jmp    @C0032
 000003A9		   *@C002D:
 000003A9  3C 45	   *	    cmp    al, 'E'
 000003AB  74 04	   *	    je	@C0034
 000003AD  3C 65	   *	    cmp    al, 'e'
 000003AF  75 09	   *	    jne    @C0033
 000003B1		   *@C0034:
							exit
 000003B1  6A 00	   *	    push   +000000000h
 000003B3  E8 00000000 E   *	    call   ExitProcess

						.ELSE
 000003B8  EB 16	   *	    jmp    @C0036
 000003BA		   *@C0033:
							mWriteln "INVALID"
 00000559		     2		.data		
 00000559 49 4E 56 41 4C     2		??000F BYTE "INVALID",0	
	   49 44 00
 000003BA		     2		.code
 000003BA  52		     2		push	edx
 000003BB  BA 00000559 R     2		mov	edx,OFFSET ??000F
 000003C0  E8 00000000 E     2		call	WriteString
 000003C5  5A		     2		pop	edx
 000003C6  E8 00000000 E     1		call	Crlf
 000003CB  E9 FFFFFE15					jmp asking
						.ENDIF
 000003D0		   *@C0036:
 000003D0		   *@C0032:
 000003D0		   *@C002C:
 000003D0		   *@C0028:
 000003D0		   *@C0022:
 000003D0		   *@C001C:
 000003D0		   *@C0018:
 000003D0  C3					ret

 000003D1  C3				ret
 000003D2			GetInput ENDP
 000003D2			CheckAvailibity PROC
 000003D2  BE 0000001A R		mov esi, OFFSET map			
 000003D7  8B F8			mov edi,eax					;edi = current position

 000003D9  80 3F 2A			cmp BYTE PTR [edi],2ah		;wall	*
 000003DC  74 0F			je Wall
 000003DE  80 3F 24			cmp BYTE PTR [edi],24h		;ghost  $
 000003E1  74 2F			je Ghost
 000003E3  80 3F 20			cmp BYTE PTR [edi],20h		;blank  
 000003E6  74 3D			je Blank
 000003E8  80 3F 23			cmp BYTE PTR [edi],23h		;deghost #
 000003EB  74 12			je DeGhost


 000003ED				Wall:
						mwriteln "it's a wall"
 00000561		     2		.data		
 00000561 69 74 27 73 20     2		??0010 BYTE "it's a wall",0	
	   61 20 77 61 6C
	   6C 00
 000003ED		     2		.code
 000003ED  52		     2		push	edx
 000003EE  BA 00000561 R     2		mov	edx,OFFSET ??0010
 000003F3  E8 00000000 E     2		call	WriteString
 000003F8  5A		     2		pop	edx
 000003F9  E8 00000000 E     1		call	Crlf
 000003FE  C3					ret
 000003FF				DeGhost:
						mwriteln "it's a deghost"
 0000056D		     2		.data		
 0000056D 69 74 27 73 20     2		??0011 BYTE "it's a deghost",0	
	   61 20 64 65 67
	   68 6F 73 74 00
 000003FF		     2		.code
 000003FF  52		     2		push	edx
 00000400  BA 0000056D R     2		mov	edx,OFFSET ??0011
 00000405  E8 00000000 E     2		call	WriteString
 0000040A  5A		     2		pop	edx
 0000040B  E8 00000000 E     1		call	Crlf
 00000410  EB 26				jmp MoveToDeGhost
 00000412				Ghost:
						mWriteln "it's a ghost"
 0000057C		     2		.data		
 0000057C 69 74 27 73 20     2		??0012 BYTE "it's a ghost",0	
	   61 20 67 68 6F
	   73 74 00
 00000412		     2		.code
 00000412  52		     2		push	edx
 00000413  BA 0000057C R     2		mov	edx,OFFSET ??0012
 00000418  E8 00000000 E     2		call	WriteString
 0000041D  5A		     2		pop	edx
 0000041E  E8 00000000 E     1		call	Crlf
 00000423  EB 67				jmp MoveToGhost
 00000425				Blank:
						mWriteln "it's a blank"
 00000589		     2		.data		
 00000589 69 74 27 73 20     2		??0013 BYTE "it's a blank",0	
	   61 20 62 6C 61
	   6E 6B 00
 00000425		     2		.code
 00000425  52		     2		push	edx
 00000426  BA 00000589 R     2		mov	edx,OFFSET ??0013
 0000042B  E8 00000000 E     2		call	WriteString
 00000430  5A		     2		pop	edx
 00000431  E8 00000000 E     1		call	Crlf
 00000436  EB 33				jmp MoveToBlank

					;------------DEGHOST---------------
 00000438				MoveToDeGhost:
 00000438  BB 00000003				mov ebx,3h
 0000043D  83 3D 00000427 R			cmp  pacmanPrev,1h			;if pacman ate ghost at previous turn
	   01
 00000444  74 78				je CurrentToDeghost
 00000446  83 3D 00000427 R			cmp  pacmanPrev,0h			;if pacman didn't ate ghost at previous turn
	   00
 0000044D  74 5E				je CurretnToBlank
 0000044F  83 3D 00000427 R			cmp pacmanPrev,3h			;if pacman was at deghost at previous turn
	   03
 00000456  74 01				je StillDeghost
 00000458  C3					ret

 00000459				StillDeghost:
 00000459  89 1D 00000427 R			mov pacmanPrev, ebx			;save status in ebx
 0000045F  8B 35 0000041F R			mov esi, pacmanCurrent	
 00000465  C6 06 23				mov BYTE PTR [esi],23h		;current position -> #	
 00000468  EB 65				jmp NextToPacman
 0000046A  C3					ret
					;------------Blank-----------------
 0000046B				MoveToBlank:
 0000046B  BB 00000000				mov ebx,0h
 00000470  83 3D 00000427 R			cmp  pacmanPrev,1h			;if pacman's ate ghost at previous turn
	   01
 00000477  74 45				je CurrentToDeghost
 00000479  83 3D 00000427 R			cmp  pacmanPrev,0h			;if pacman didn't ate ghost at previous turn
	   00
 00000480  74 2B				je CurretnToBlank
 00000482  83 3D 00000427 R			cmp pacmanPrev,3h			;if pacman was at deghost at previous turn
	   03
 00000489  74 CE				je StillDeghost
 0000048B  C3					ret


					;------------GHOST-----------------
 0000048C				MoveToGhost:
 0000048C  BB 00000001				mov ebx,1h
 00000491  83 3D 00000427 R			cmp  pacmanPrev,1h			;if pacman's ate ghost at prev turn
	   01
 00000498  74 24				je CurrentToDeghost
 0000049A  83 3D 00000427 R			cmp  pacmanPrev,0h			;if pacman didn't ate ghost at previous turn
	   00
 000004A1  74 0A				je CurretnToBlank
 000004A3  83 3D 00000427 R			cmp pacmanPrev,3h			;if pacman was at deghost at previous turn
	   03
 000004AA  74 AD				je StillDeghost
 000004AC  C3					ret

 000004AD				CurretnToBlank:
 000004AD  89 1D 00000427 R			mov pacmanPrev, ebx
 000004B3  8B 35 0000041F R			mov esi, pacmanCurrent
 000004B9  C6 06 20				mov BYTE PTR [esi],20h		;Current position ->  
 000004BC  EB 11				jmp NextToPacman

 000004BE				CurrentToDeghost:
 000004BE  89 1D 00000427 R			mov pacmanPrev, ebx
 000004C4  8B 35 0000041F R			mov esi, pacmanCurrent
 000004CA  C6 06 23				mov BYTE PTR [esi],23h		;current position -> #
 000004CD  EB 00				jmp NextToPacman

 000004CF				NextToPacman:
 000004CF  8B F7				mov esi, edi
 000004D1  C6 06 40				mov BYTE PTR [esi],40h		;currentPosition -> @
 000004D4  89 35 0000041F R			mov pacmanCurrent, esi		;update pacman's position
 000004DA  C3					ret


 000004DB  C3				ret
 000004DC			CheckAvailibity ENDP

				END main
Microsoft (R) Macro Assembler Version 14.25.28612.0	    06/14/20 00:24:41
AddSub2.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000596 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000004DC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CheckAvailibity  . . . . . . . .	P Near	 000003D2 _TEXT	Length= 0000010A Public STDCALL
  Wall . . . . . . . . . . . . .	L Near	 000003ED _TEXT	
  DeGhost  . . . . . . . . . . .	L Near	 000003FF _TEXT	
  Ghost  . . . . . . . . . . . .	L Near	 00000412 _TEXT	
  Blank  . . . . . . . . . . . .	L Near	 00000425 _TEXT	
  MoveToDeGhost  . . . . . . . .	L Near	 00000438 _TEXT	
  StillDeghost . . . . . . . . .	L Near	 00000459 _TEXT	
  MoveToBlank  . . . . . . . . .	L Near	 0000046B _TEXT	
  MoveToGhost  . . . . . . . . .	L Near	 0000048C _TEXT	
  CurretnToBlank . . . . . . . .	L Near	 000004AD _TEXT	
  CurrentToDeghost . . . . . . .	L Near	 000004BE _TEXT	
  NextToPacman . . . . . . . . .	L Near	 000004CF _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FindVariables  . . . . . . . . .	P Near	 000000D1 _TEXT	Length= 00000041 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 000000E1 _TEXT	
  Wall . . . . . . . . . . . . .	L Near	 000000FB _TEXT	
  Ghost  . . . . . . . . . . . .	L Near	 00000100 _TEXT	
  Pacman . . . . . . . . . . . .	L Near	 00000106 _TEXT	
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetInput . . . . . . . . . . . .	P Near	 000001E5 _TEXT	Length= 000001ED Public STDCALL
  asking . . . . . . . . . . . .	L Near	 000001E5 _TEXT	
  GettingPSEInput  . . . . . . .	L Near	 00000210 _TEXT	
  FILECHOICE_1 . . . . . . . . .	L Near	 00000222 _TEXT	
  MAP2_1 . . . . . . . . . . . .	L Near	 00000248 _TEXT	
  MAP3_1 . . . . . . . . . . . .	L Near	 00000258 _TEXT	
  INVALIDPSE . . . . . . . . . .	L Near	 0000026B _TEXT	
  AFTERMAP_1 . . . . . . . . . .	L Near	 0000027E _TEXT	
  GettingAllInput  . . . . . . .	L Near	 000002B2 _TEXT	
  FILECHOICE_2 . . . . . . . . .	L Near	 000002C4 _TEXT	
  MAP2_2 . . . . . . . . . . . .	L Near	 000002EA _TEXT	
  MAP3_2 . . . . . . . . . . . .	L Near	 000002FE _TEXT	
  INVALIDALL . . . . . . . . . .	L Near	 0000030E _TEXT	
  AFTERMAP_2 . . . . . . . . . .	L Near	 00000321 _TEXT	
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenFile . . . . . . . . . . . .	P Near	 0000002C _TEXT	Length= 0000004E Public STDCALL
  file_ok  . . . . . . . . . . .	L Near	 00000040 _TEXT	
  close_file . . . . . . . . . .	L Near	 0000006F _TEXT	
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PrintMap . . . . . . . . . . . .	P Near	 000000C6 _TEXT	Length= 0000000B Public STDCALL
PrintMenu  . . . . . . . . . . .	P Near	 00000112 _TEXT	Length= 000000D3 Public STDCALL
  PrintAll . . . . . . . . . . .	L Near	 00000124 _TEXT	
  PrintPSE . . . . . . . . . . .	L Near	 000001A6 _TEXT	
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000002C Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000000F _TEXT	
numOfRowCol  . . . . . . . . . .	P Near	 0000007A _TEXT	Length= 0000004C Public STDCALL
  gettingColNum  . . . . . . . .	L Near	 0000008F _TEXT	
  Col  . . . . . . . . . . . . .	L Near	 000000AA _TEXT	
  gettingRowNum  . . . . . . . .	L Near	 000000B0 _TEXT	
  Row  . . . . . . . . . . . . .	L Near	 000000BA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000042B _DATA	
??0001 . . . . . . . . . . . . .	Byte	 0000043E _DATA	
??0002 . . . . . . . . . . . . .	Byte	 0000044B _DATA	
??0003 . . . . . . . . . . . . .	Byte	 0000045B _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000468 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 0000047A _DATA	
??0006 . . . . . . . . . . . . .	Byte	 0000048D _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00000499 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 000004AC _DATA	
??0009 . . . . . . . . . . . . .	Byte	 000004B9 _DATA	
??000A . . . . . . . . . . . . .	Byte	 000004C5 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00000503 _DATA	
??000C . . . . . . . . . . . . .	Byte	 0000050B _DATA	
??000D . . . . . . . . . . . . .	Byte	 00000513 _DATA	
??000E . . . . . . . . . . . . .	Byte	 00000551 _DATA	
??000F . . . . . . . . . . . . .	Byte	 00000559 _DATA	
??0010 . . . . . . . . . . . . .	Byte	 00000561 _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0000056D _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0000057C _DATA	
??0013 . . . . . . . . . . . . .	Byte	 00000589 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAP_SIZE . . . . . . . . . . . .	Number	 000003E8h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fileHandle . . . . . . . . . . .	DWord	 00000402 _DATA	
filename2  . . . . . . . . . . .	Byte	 00000008 _DATA	
filename3  . . . . . . . . . . .	Byte	 00000011 _DATA	
filename . . . . . . . . . . . .	Byte	 00000000 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
mapLength  . . . . . . . . . . .	DWord	 00000413 _DATA	
map  . . . . . . . . . . . . . .	Byte	 0000001A _DATA	
numOfCol . . . . . . . . . . . .	DWord	 00000417 _DATA	
numOfGhost . . . . . . . . . . .	DWord	 00000423 _DATA	
numOfRow . . . . . . . . . . . .	DWord	 0000041B _DATA	
pacmanCurrent  . . . . . . . . .	DWord	 0000041F _DATA	
pacmanPrev . . . . . . . . . . .	DWord	 00000427 _DATA	
prompt . . . . . . . . . . . . .	Byte	 00000406 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
